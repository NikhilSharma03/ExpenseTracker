// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: expense.proto

package expensepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance float64 `protobuf:"fixed64,1,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_expense_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_expense_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_expense_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount float64 `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Type   string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_expense_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_expense_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_expense_proto_rawDescGZIP(), []int{1}
}

func (x *Transaction) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transaction) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_expense_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_expense_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_expense_proto_rawDescGZIP(), []int{2}
}

var File_expense_proto protoreflect.FileDescriptor

var file_expense_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x39, 0x0a, 0x0b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xba,
	0x01, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x2d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e,
	0x2e, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d,
	0x2e, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12,
	0x3a, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x2e,
	0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x14, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2e,
	0x2f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_expense_proto_rawDescOnce sync.Once
	file_expense_proto_rawDescData = file_expense_proto_rawDesc
)

func file_expense_proto_rawDescGZIP() []byte {
	file_expense_proto_rawDescOnce.Do(func() {
		file_expense_proto_rawDescData = protoimpl.X.CompressGZIP(file_expense_proto_rawDescData)
	})
	return file_expense_proto_rawDescData
}

var file_expense_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_expense_proto_goTypes = []interface{}{
	(*User)(nil),        // 0: expense.User
	(*Transaction)(nil), // 1: expense.Transaction
	(*Empty)(nil),       // 2: expense.Empty
}
var file_expense_proto_depIdxs = []int32{
	2, // 0: expense.ExpenseService.GetExpenseHistory:input_type -> expense.Empty
	2, // 1: expense.ExpenseService.GetBalance:input_type -> expense.Empty
	1, // 2: expense.ExpenseService.AddExpense:input_type -> expense.Transaction
	1, // 3: expense.ExpenseService.GetExpenseHistory:output_type -> expense.Transaction
	0, // 4: expense.ExpenseService.GetBalance:output_type -> expense.User
	1, // 5: expense.ExpenseService.AddExpense:output_type -> expense.Transaction
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_expense_proto_init() }
func file_expense_proto_init() {
	if File_expense_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_expense_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_expense_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_expense_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_expense_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_expense_proto_goTypes,
		DependencyIndexes: file_expense_proto_depIdxs,
		MessageInfos:      file_expense_proto_msgTypes,
	}.Build()
	File_expense_proto = out.File
	file_expense_proto_rawDesc = nil
	file_expense_proto_goTypes = nil
	file_expense_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExpenseServiceClient is the client API for ExpenseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExpenseServiceClient interface {
	GetExpenseHistory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ExpenseService_GetExpenseHistoryClient, error)
	GetBalance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*User, error)
	AddExpense(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error)
}

type expenseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExpenseServiceClient(cc grpc.ClientConnInterface) ExpenseServiceClient {
	return &expenseServiceClient{cc}
}

func (c *expenseServiceClient) GetExpenseHistory(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ExpenseService_GetExpenseHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExpenseService_serviceDesc.Streams[0], "/expense.ExpenseService/GetExpenseHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &expenseServiceGetExpenseHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExpenseService_GetExpenseHistoryClient interface {
	Recv() (*Transaction, error)
	grpc.ClientStream
}

type expenseServiceGetExpenseHistoryClient struct {
	grpc.ClientStream
}

func (x *expenseServiceGetExpenseHistoryClient) Recv() (*Transaction, error) {
	m := new(Transaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *expenseServiceClient) GetBalance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/expense.ExpenseService/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) AddExpense(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/expense.ExpenseService/AddExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpenseServiceServer is the server API for ExpenseService service.
type ExpenseServiceServer interface {
	GetExpenseHistory(*Empty, ExpenseService_GetExpenseHistoryServer) error
	GetBalance(context.Context, *Empty) (*User, error)
	AddExpense(context.Context, *Transaction) (*Transaction, error)
}

// UnimplementedExpenseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExpenseServiceServer struct {
}

func (*UnimplementedExpenseServiceServer) GetExpenseHistory(*Empty, ExpenseService_GetExpenseHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetExpenseHistory not implemented")
}
func (*UnimplementedExpenseServiceServer) GetBalance(context.Context, *Empty) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (*UnimplementedExpenseServiceServer) AddExpense(context.Context, *Transaction) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExpense not implemented")
}

func RegisterExpenseServiceServer(s *grpc.Server, srv ExpenseServiceServer) {
	s.RegisterService(&_ExpenseService_serviceDesc, srv)
}

func _ExpenseService_GetExpenseHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExpenseServiceServer).GetExpenseHistory(m, &expenseServiceGetExpenseHistoryServer{stream})
}

type ExpenseService_GetExpenseHistoryServer interface {
	Send(*Transaction) error
	grpc.ServerStream
}

type expenseServiceGetExpenseHistoryServer struct {
	grpc.ServerStream
}

func (x *expenseServiceGetExpenseHistoryServer) Send(m *Transaction) error {
	return x.ServerStream.SendMsg(m)
}

func _ExpenseService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense.ExpenseService/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).GetBalance(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_AddExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).AddExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense.ExpenseService/AddExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).AddExpense(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExpenseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "expense.ExpenseService",
	HandlerType: (*ExpenseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _ExpenseService_GetBalance_Handler,
		},
		{
			MethodName: "AddExpense",
			Handler:    _ExpenseService_AddExpense_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetExpenseHistory",
			Handler:       _ExpenseService_GetExpenseHistory_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "expense.proto",
}
